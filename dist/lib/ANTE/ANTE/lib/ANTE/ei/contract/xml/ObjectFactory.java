//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-646 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2008.10.21 at 11:46:12 AM BST 
//


package ei.contract.xml;

import javax.xml.bind.JAXBElement;
import javax.xml.bind.annotation.XmlElementDecl;
import javax.xml.bind.annotation.XmlRegistry;
import javax.xml.namespace.QName;


/**
 * This object contains factory methods for each 
 * Java content interface and Java element interface 
 * generated in the ei.contract.xml package. 
 * <p>An ObjectFactory allows you to programatically 
 * construct new instances of the Java representation 
 * for XML content. The Java representation of XML 
 * content can consist of schema derived interfaces 
 * and classes representing the binding of schema 
 * type definitions, element declarations and model 
 * groups.  Factory methods for each of these are 
 * provided in this class.
 * 
 */
@XmlRegistry
public class ObjectFactory {

    private final static QName _Fact_QNAME = new QName("", "fact");

    /**
     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: ei.contract.xml
     * 
     */
    public ObjectFactory() {
    }

    /**
     * Create an instance of {@link Contract.Header.ContractualInfo.Slot }
     * 
     */
    public Contract.Header.ContractualInfo.Slot createContractHeaderContractualInfoSlot() {
        return new Contract.Header.ContractualInfo.Slot();
    }

    /**
     * Create an instance of {@link NormType.Prescription }
     * 
     */
    public NormType.Prescription createNormTypePrescription() {
        return new NormType.Prescription();
    }

    /**
     * Create an instance of {@link IfactType }
     * 
     */
    public IfactType createIfactType() {
        return new IfactType();
    }

    /**
     * Create an instance of {@link FrameType }
     * 
     */
    public FrameType createFrameType() {
        return new FrameType();
    }

    /**
     * Create an instance of {@link NotType }
     * 
     */
    public NotType createNotType() {
        return new NotType();
    }

    /**
     * Create an instance of {@link Contract.Header }
     * 
     */
    public Contract.Header createContractHeader() {
        return new Contract.Header();
    }

    /**
     * Create an instance of {@link Contract }
     * 
     */
    public Contract createContract() {
        return new Contract();
    }

    /**
     * Create an instance of {@link ContractualInfoType }
     * 
     */
    public ContractualInfoType createContractualInfoType() {
        return new ContractualInfoType();
    }

    /**
     * Create an instance of {@link VarAllowedType }
     * 
     */
    public VarAllowedType createVarAllowedType() {
        return new VarAllowedType();
    }

    /**
     * Create an instance of {@link NormType.Scope }
     * 
     */
    public NormType.Scope createNormTypeScope() {
        return new NormType.Scope();
    }

    /**
     * Create an instance of {@link ObligationType }
     * 
     */
    public ObligationType createObligationType() {
        return new ObligationType();
    }

    /**
     * Create an instance of {@link AndType }
     * 
     */
    public AndType createAndType() {
        return new AndType();
    }

    /**
     * Create an instance of {@link TimeType }
     * 
     */
    public TimeType createTimeType() {
        return new TimeType();
    }

    /**
     * Create an instance of {@link FulfillmentType }
     * 
     */
    public FulfillmentType createFulfillmentType() {
        return new FulfillmentType();
    }

    /**
     * Create an instance of {@link Contract.Norms }
     * 
     */
    public Contract.Norms createContractNorms() {
        return new Contract.Norms();
    }

    /**
     * Create an instance of {@link LivelineViolationType }
     * 
     */
    public LivelineViolationType createLivelineViolationType() {
        return new LivelineViolationType();
    }

    /**
     * Create an instance of {@link ExpressionType }
     * 
     */
    public ExpressionType createExpressionType() {
        return new ExpressionType();
    }

    /**
     * Create an instance of {@link RuleType.Then }
     * 
     */
    public RuleType.Then createRuleTypeThen() {
        return new RuleType.Then();
    }

    /**
     * Create an instance of {@link StartContractType }
     * 
     */
    public StartContractType createStartContractType() {
        return new StartContractType();
    }

    /**
     * Create an instance of {@link NormType.Situation }
     * 
     */
    public NormType.Situation createNormTypeSituation() {
        return new NormType.Situation();
    }

    /**
     * Create an instance of {@link OrType }
     * 
     */
    public OrType createOrType() {
        return new OrType();
    }

    /**
     * Create an instance of {@link NormType }
     * 
     */
    public NormType createNormType() {
        return new NormType();
    }

    /**
     * Create an instance of {@link Contract.Header.Who }
     * 
     */
    public Contract.Header.Who createContractHeaderWho() {
        return new Contract.Header.Who();
    }

    /**
     * Create an instance of {@link DeadlineViolationType }
     * 
     */
    public DeadlineViolationType createDeadlineViolationType() {
        return new DeadlineViolationType();
    }

    /**
     * Create an instance of {@link SituationElementType }
     * 
     */
    public SituationElementType createSituationElementType() {
        return new SituationElementType();
    }

    /**
     * Create an instance of {@link RelConditionType }
     * 
     */
    public RelConditionType createRelConditionType() {
        return new RelConditionType();
    }

    /**
     * Create an instance of {@link FrameType.Slot }
     * 
     */
    public FrameType.Slot createFrameTypeSlot() {
        return new FrameType.Slot();
    }

    /**
     * Create an instance of {@link Contract.Rules }
     * 
     */
    public Contract.Rules createContractRules() {
        return new Contract.Rules();
    }

    /**
     * Create an instance of {@link EndContractType }
     * 
     */
    public EndContractType createEndContractType() {
        return new EndContractType();
    }

    /**
     * Create an instance of {@link ContractualInfoType.Slot }
     * 
     */
    public ContractualInfoType.Slot createContractualInfoTypeSlot() {
        return new ContractualInfoType.Slot();
    }

    /**
     * Create an instance of {@link RuleType.If }
     * 
     */
    public RuleType.If createRuleTypeIf() {
        return new RuleType.If();
    }

    /**
     * Create an instance of {@link RuleType }
     * 
     */
    public RuleType createRuleType() {
        return new RuleType();
    }

    /**
     * Create an instance of {@link Contract.Header.ContractualInfo }
     * 
     */
    public Contract.Header.ContractualInfo createContractHeaderContractualInfo() {
        return new Contract.Header.ContractualInfo();
    }

    /**
     * Create an instance of {@link ViolationType }
     * 
     */
    public ViolationType createViolationType() {
        return new ViolationType();
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link FrameType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "fact")
    public JAXBElement<FrameType> createFact(FrameType value) {
        return new JAXBElement<FrameType>(_Fact_QNAME, FrameType.class, null, value);
    }

}
